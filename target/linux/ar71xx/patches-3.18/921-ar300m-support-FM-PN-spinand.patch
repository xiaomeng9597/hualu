--- a/drivers/mtd/nand/ath79_spinand.c
+++ b/drivers/mtd/nand/ath79_spinand.c
@@ -203,6 +203,8 @@ static int ath79_spinand_read_id(struct
 	struct ath79_spinand_command cmd = {0};
 
 	cmd.cmd = CMD_READ_ID;
+	cmd.n_addr = 1;
+	cmd.addr[0] = 0x00;
 	cmd.n_rx = 3;
 	cmd.rx_buf = id;
 
@@ -213,6 +215,10 @@ static int ath79_spinand_read_id(struct
 	}
 
 	/* GD conflict with cell info rules */
+	if((id[0]==0xb1)&&(id[1]==0x48)&&(id[2]==0xc8)){
+	id[0]=0xc8;
+	id[1]=0xb1;
+	}
 	id[2] = 0;
 
 	return retval;
@@ -681,9 +687,9 @@ static void ath79_spinand_cmdfunc(struct
 					state->buf);
 		break;
 	case NAND_CMD_READOOB:
-		state->buf_ptr = 0;
-		ath79_spinand_read_page(info->spi, page, mtd->writesize,
-					mtd->oobsize, state->buf);
+		state->buf_ptr = mtd->writesize;
+		ath79_spinand_read_page(info->spi, page, 0x0,/*mtd->writesize,*/
+					mtd->writesize + mtd->oobsize, state->buf);
 		break;
 	case NAND_CMD_RNDOUT:
 		state->buf_ptr = column;
--- a/drivers/mtd/nand/nand_ids.c
+++ b/drivers/mtd/nand/nand_ids.c
@@ -104,6 +104,7 @@ struct nand_flash_dev nand_flash_ids[] =
 	EXTENDED_ID_NAND("NAND 128MiB 3,3V 8-bit",  0xF1, 128, LP_OPTIONS),
 	EXTENDED_ID_NAND("NAND 128MiB 3,3V 8-bit",  0xD1, 128, LP_OPTIONS),
 	EXTENDED_ID_NAND("NAND 128MiB 1,8V 16-bit", 0xB1, 128, LP_OPTIONS16),
+	EXTENDED_ID_NAND("NAND 128MiB 3,3V 16-bit", 0xE1, 128, LP_OPTIONS16),
 	EXTENDED_ID_NAND("NAND 128MiB 3,3V 16-bit", 0xC1, 128, LP_OPTIONS16),
 	EXTENDED_ID_NAND("NAND 128MiB 1,8V 16-bit", 0xAD, 128, LP_OPTIONS16),
 
@@ -181,6 +182,7 @@ struct nand_manufacturers nand_manuf_ids
 	{NAND_MFR_INTEL, "Intel"},
 	{NAND_MFR_GIGADEVICE, "Giga Device"},
 	{NAND_MFR_HEYANGTEK, "HeYang Tek"},
+	{NAND_MFR_FWDEVICE, "FW Device"},
 	{0x0, "Unknown"}
 };
 
--- a/include/linux/mtd/nand.h
+++ b/include/linux/mtd/nand.h
@@ -722,6 +722,7 @@ struct nand_chip {
 #define NAND_MFR_MACRONIX	0xc2
 #define NAND_MFR_GIGADEVICE	0xc8
 #define NAND_MFR_HEYANGTEK	0xc9
+#define NAND_MFR_FWDEVICE	0xA1
 #define NAND_MFR_EON		0x92
 #define NAND_MFR_SANDISK	0x45
 #define NAND_MFR_INTEL		0x89
